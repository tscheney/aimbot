// Generated by gencpp from file soccerref/GameState.msg
// DO NOT EDIT!


#ifndef SOCCERREF_MESSAGE_GAMESTATE_H
#define SOCCERREF_MESSAGE_GAMESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace soccerref
{
template <class ContainerAllocator>
struct GameState_
{
  typedef GameState_<ContainerAllocator> Type;

  GameState_()
    : home_score(0)
    , away_score(0)
    , home_bot_count(0)
    , away_bot_count(0)
    , remaining_seconds(0)
    , play(false)
    , reset_field(false)
    , second_half(false)  {
    }
  GameState_(const ContainerAllocator& _alloc)
    : home_score(0)
    , away_score(0)
    , home_bot_count(0)
    , away_bot_count(0)
    , remaining_seconds(0)
    , play(false)
    , reset_field(false)
    , second_half(false)  {
  (void)_alloc;
    }



   typedef int32_t _home_score_type;
  _home_score_type home_score;

   typedef int32_t _away_score_type;
  _away_score_type away_score;

   typedef int32_t _home_bot_count_type;
  _home_bot_count_type home_bot_count;

   typedef int32_t _away_bot_count_type;
  _away_bot_count_type away_bot_count;

   typedef int32_t _remaining_seconds_type;
  _remaining_seconds_type remaining_seconds;

   typedef uint8_t _play_type;
  _play_type play;

   typedef uint8_t _reset_field_type;
  _reset_field_type reset_field;

   typedef uint8_t _second_half_type;
  _second_half_type second_half;




  typedef boost::shared_ptr< ::soccerref::GameState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soccerref::GameState_<ContainerAllocator> const> ConstPtr;

}; // struct GameState_

typedef ::soccerref::GameState_<std::allocator<void> > GameState;

typedef boost::shared_ptr< ::soccerref::GameState > GameStatePtr;
typedef boost::shared_ptr< ::soccerref::GameState const> GameStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::soccerref::GameState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::soccerref::GameState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace soccerref

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'soccerref': ['/home/robot/catkin_ws/src/soccerref/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::soccerref::GameState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::soccerref::GameState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soccerref::GameState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soccerref::GameState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soccerref::GameState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soccerref::GameState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::soccerref::GameState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04b9504566012ef17377e5d0ae0aba41";
  }

  static const char* value(const ::soccerref::GameState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04b9504566012ef1ULL;
  static const uint64_t static_value2 = 0x7377e5d0ae0aba41ULL;
};

template<class ContainerAllocator>
struct DataType< ::soccerref::GameState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "soccerref/GameState";
  }

  static const char* value(const ::soccerref::GameState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::soccerref::GameState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 home_score\n\
int32 away_score\n\
int32 home_bot_count\n\
int32 away_bot_count\n\
int32 remaining_seconds\n\
bool play\n\
bool reset_field\n\
bool second_half\n\
";
  }

  static const char* value(const ::soccerref::GameState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::soccerref::GameState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.home_score);
      stream.next(m.away_score);
      stream.next(m.home_bot_count);
      stream.next(m.away_bot_count);
      stream.next(m.remaining_seconds);
      stream.next(m.play);
      stream.next(m.reset_field);
      stream.next(m.second_half);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GameState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::soccerref::GameState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::soccerref::GameState_<ContainerAllocator>& v)
  {
    s << indent << "home_score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.home_score);
    s << indent << "away_score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.away_score);
    s << indent << "home_bot_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.home_bot_count);
    s << indent << "away_bot_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.away_bot_count);
    s << indent << "remaining_seconds: ";
    Printer<int32_t>::stream(s, indent + "  ", v.remaining_seconds);
    s << indent << "play: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.play);
    s << indent << "reset_field: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_field);
    s << indent << "second_half: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.second_half);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOCCERREF_MESSAGE_GAMESTATE_H
