# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from soccerref/GameState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GameState(genpy.Message):
  _md5sum = "04b9504566012ef17377e5d0ae0aba41"
  _type = "soccerref/GameState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 home_score
int32 away_score
int32 home_bot_count
int32 away_bot_count
int32 remaining_seconds
bool play
bool reset_field
bool second_half"""
  __slots__ = ['home_score','away_score','home_bot_count','away_bot_count','remaining_seconds','play','reset_field','second_half']
  _slot_types = ['int32','int32','int32','int32','int32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       home_score,away_score,home_bot_count,away_bot_count,remaining_seconds,play,reset_field,second_half

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GameState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.home_score is None:
        self.home_score = 0
      if self.away_score is None:
        self.away_score = 0
      if self.home_bot_count is None:
        self.home_bot_count = 0
      if self.away_bot_count is None:
        self.away_bot_count = 0
      if self.remaining_seconds is None:
        self.remaining_seconds = 0
      if self.play is None:
        self.play = False
      if self.reset_field is None:
        self.reset_field = False
      if self.second_half is None:
        self.second_half = False
    else:
      self.home_score = 0
      self.away_score = 0
      self.home_bot_count = 0
      self.away_bot_count = 0
      self.remaining_seconds = 0
      self.play = False
      self.reset_field = False
      self.second_half = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i3B().pack(_x.home_score, _x.away_score, _x.home_bot_count, _x.away_bot_count, _x.remaining_seconds, _x.play, _x.reset_field, _x.second_half))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.home_score, _x.away_score, _x.home_bot_count, _x.away_bot_count, _x.remaining_seconds, _x.play, _x.reset_field, _x.second_half,) = _get_struct_5i3B().unpack(str[start:end])
      self.play = bool(self.play)
      self.reset_field = bool(self.reset_field)
      self.second_half = bool(self.second_half)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i3B().pack(_x.home_score, _x.away_score, _x.home_bot_count, _x.away_bot_count, _x.remaining_seconds, _x.play, _x.reset_field, _x.second_half))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.home_score, _x.away_score, _x.home_bot_count, _x.away_bot_count, _x.remaining_seconds, _x.play, _x.reset_field, _x.second_half,) = _get_struct_5i3B().unpack(str[start:end])
      self.play = bool(self.play)
      self.reset_field = bool(self.reset_field)
      self.second_half = bool(self.second_half)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i3B = None
def _get_struct_5i3B():
    global _struct_5i3B
    if _struct_5i3B is None:
        _struct_5i3B = struct.Struct("<5i3B")
    return _struct_5i3B
