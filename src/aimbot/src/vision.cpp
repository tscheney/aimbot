#include "ros/ros.h"
#include "geometry_msgs/Pose2D.h"
#include "geometry_msgs/Vector3.h"
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>

//opencv
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>

#include <cmath>
#include <iostream>
#include <cv.h>
#include <highgui.h>

using namespace std;
using namespace cv;

#define FIELD_WIDTH     3.53  // in meters
#define FIELD_HEIGHT    2.39 
#define ROBOT_RADIUS    0.10
#define GUI_NAME        "Soccer Overhead Camera"

// Mouse click parameters, empirically found
// The smaller the number, the more positive the error
// (i.e., it will be above the mouse in +y region)
#define FIELD_WIDTH_PIXELS      577.0 // measured from threshold of goal to goal
#define FIELD_HEIGHT_PIXELS     388.0 // measured from inside of wall to wall
#define CAMERA_WIDTH            640.0
#define CAMERA_HEIGHT           480.0

// These colours need to match the Gazebo materials
Scalar red[]    = {Scalar(0,   128, 128), Scalar(10,  255, 255)};
Scalar yellow[] = {Scalar(20,  128, 128), Scalar(30,  255, 255)};
Scalar green[]  = {Scalar(55,  128, 128), Scalar(65,  255, 255)};
Scalar blue[]   = {Scalar(115, 128, 128), Scalar(125, 255, 255)};
Scalar purple[] = {Scalar(145, 128, 128), Scalar(155, 255, 255)};

// Handlers for vision position publishers
ros::Publisher home1_pub;
ros::Publisher home2_pub;
ros::Publisher away1_pub;
ros::Publisher away2_pub;
ros::Publisher ball_pub;
ros::Publisher ball_position_pub; // for publishing internally from the vision window

// Use variables to store position of objects. These variables are very
// useful when the ball cannot be seen, otherwise we'll get the position (0, 0)
geometry_msgs::Pose2D poseHome1;
geometry_msgs::Pose2D poseHome2;
geometry_msgs::Pose2D poseAway1;
geometry_msgs::Pose2D poseAway2;
geometry_msgs::Pose2D poseBall;


Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
    try
    {
        Mat frame = cv_bridge::toCvShare(msg, "bgr8")->image;
        pMOG2->apply(frame, fgMaskMOG2);
        imshow(GUI_NAME, fgMaskMOG2);
        waitKey(30);
    }
    catch (cv_bridge::Exception& e)
    {
        ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg->encoding.c_str());
    }
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "vision_sim");
    ros::NodeHandle nh;

    // Create OpenCV Window and add a mouse callback for clicking
    namedWindow(GUI_NAME, CV_WINDOW_AUTOSIZE);
    //setMouseCallback(GUI_NAME, mouseCallback, NULL);

    // Create ball publisher
    //ball_position_pub = nh.advertise<geometry_msgs::Vector3>("/ball/command", 1);

    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach

    // Subscribe to camera
    image_transport::ImageTransport it(nh);
    image_transport::Subscriber image_sub = it.subscribe("/test/usb_cam/image_raw", 1, imageCallback);

    // Create Vision Publishers
    //home1_pub = nh.advertise<geometry_msgs::Pose2D>("/vision/home1", 5);
    //home2_pub = nh.advertise<geometry_msgs::Pose2D>("/vision/home2", 5);
    //away1_pub = nh.advertise<geometry_msgs::Pose2D>("/vision/away1", 5);
    //away2_pub = nh.advertise<geometry_msgs::Pose2D>("/vision/away2", 5);
    //ball_pub = nh.advertise<geometry_msgs::Pose2D>("/vision/ball", 5);
    ros::spin();
    return 0;
}
